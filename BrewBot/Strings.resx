<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChooseCharacter" xml:space="preserve">
    <value>@{0}, choose from {1}, {2}, {3} or {4}.</value>
    <comment>Tell a player which characters to choose from</comment>
  </data>
  <data name="FinishDrink" xml:space="preserve">
    <value>@{0}, FINISH your drink!</value>
    <comment>Tell a player to finish their drink</comment>
  </data>
  <data name="GetDrinkTicket" xml:space="preserve">
    <value>@{0}, you got a drink ticket. Use "!give &lt;player&gt;" to give it to someone and make them drink.</value>
    <comment>Give a player a drink ticket</comment>
  </data>
  <data name="NoDrinkingGame" xml:space="preserve">
    <value>@{0}, we're not currently playing a drinking game.</value>
    <comment>Inform a user we are not currently drinking</comment>
  </data>
  <data name="NoDrinkTickets" xml:space="preserve">
    <value>@{0}, you do not have any drink tickets to give.</value>
    <comment>Inform a user they do not have any drink tickets</comment>
  </data>
  <data name="NotParticipating" xml:space="preserve">
    <value>@{0}, {1} is not participating.</value>
    <comment>Inform a user the target is not participating</comment>
  </data>
  <data name="TakeDrink" xml:space="preserve">
    <value>@{0}, take a drink.</value>
    <comment>Tell a player to take a drink</comment>
  </data>
  <data name="DrinkTicketsBalance" xml:space="preserve">
    <value>@{0}, you have {1} tickets.</value>
    <comment>Tell a player how many drink tickets they have to give out</comment>
  </data>
  <data name="TotalDrinksTaken" xml:space="preserve">
    <value>@{0}, you have taken {1} drinks!</value>
    <comment>Tell a player how many drinks they have taken during drinking games</comment>
  </data>
  <data name="Gamble_BelowMinimumBet" xml:space="preserve">
    <value>What kind of weeny bet is this!?  Bet at least @{0} @{1}!</value>
    <comment>Tell a player they have bet below the minimum</comment>
  </data>
  <data name="Gamble_InsufficentFunds" xml:space="preserve">
    <value>Your funds are grossly insufficient, @{0}!</value>
    <comment>Tell a player they have insufficient funds</comment>
  </data>
  <data name="Gamble_Result" xml:space="preserve">
    <value>@{0}, you {1} {2} {3}!</value>
    <comment>Tell a player they won or lost a bet</comment>
  </data>
  <data name="Casino_InvalidBetAmount" xml:space="preserve">
    <value>Invalid bet amount, {0}!</value>
    <comment>Tell a player that their bet amount was invalid</comment>
  </data>
  <data name="Casino_NotOperating" xml:space="preserve">
    <value>The casino is not currently operating, @{0}!</value>
    <comment>Tell a player the casino is not currently operating</comment>
  </data>
  <data name="DrinkingGame_Introduction" xml:space="preserve">
    <value>Welcome to the channel! We're playing a drinking game. If you want to join, type \"!join &lt;character&gt;\". Current characters are {0}, {1}, {2} and {3}. Type \"!quit\" to stop playing.</value>
    <comment>Introduce a player to the drinking game</comment>
  </data>
  <data name="DrinkingGame_Start" xml:space="preserve">
    <value>A drinking game has been started! Type \"!join &lt;character&gt;\" to play. Current characters are @{0}, {1}, {2} and {3}. Type \"!quit\" to stop playing.</value>
    <comment>Tell chat that we have started a drinking game.</comment>
  </data>
  <data name="GetBalance_Result" xml:space="preserve">
    <value>@{0}, your balance is {1} {2}</value>
    <comment>Tell a player their casino balance</comment>
  </data>
</root>